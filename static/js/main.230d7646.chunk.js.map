{"version":3,"sources":["App.tsx","api/goods.ts","index.tsx"],"names":["SortType","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","reorderedGoods","goods","visibleGoods","ALPHABET","sort","a","b","localeCompare","LENGTH","length","reverse","getReorderedGoods","dataFromServer","className","type","classNames","onClick","prevIsReversed","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAMKA,E,qDCNU,GACb,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,U,+BDJGA,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAwCE,IAAMC,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASF,EAASK,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAmBMC,EAlDD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAENO,EAAY,YAAOD,GAEzB,OAAQH,GACN,KAAMN,EAASK,KACb,MAEF,KAAML,EAASW,SACbD,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC5C,MAEF,KAAMd,EAASgB,OACbN,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAW7C,OAJId,GACFO,EAAaQ,UAGRR,EAwBgBS,CAAkBC,EAAgB,CACvDjB,aACAG,aAGF,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYjB,IAAaN,EAASW,WAEtCa,QA/BqB,WAC3BjB,EAAYP,EAASW,WAwBjB,iCAWA,wBACEW,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYjB,IAAaN,EAASgB,SAEtCQ,QAtCmB,WACzBjB,EAAYP,EAASgB,SA+BjB,4BAWA,wBACEM,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAapB,IAEjBqB,QA7Cc,WACpBpB,GAAc,SAAAqB,GAAc,OAAKA,MAsC7B,sBAUEnB,IAAaN,EAASK,MAAQF,IAC9B,wBACEmB,KAAK,SACLD,UAAU,4BACVG,QAjDU,WAClBpB,GAAc,GACdG,EAAYP,EAASK,OA4Cf,sBAUJ,6BACGG,EAAekB,KAAI,SAACC,GAAD,OAClB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YEtHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.230d7646.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport dataFromServer from './api/goods';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case (SortType.NONE):\n      break;\n\n    case (SortType.ALPHABET):\n      visibleGoods.sort((a, b) => a.localeCompare(b));\n      break;\n\n    case (SortType.LENGTH):\n      visibleGoods.sort((a, b) => a.length - b.length);\n      break;\n\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const handleSortByAlphabet = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleSortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleReverse = () => {\n    setIsReversed(prevIsReversed => !prevIsReversed);\n  };\n\n  const handleReset = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const reorderedGoods = getReorderedGoods(dataFromServer, {\n    isReversed,\n    sortType,\n  });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={handleSortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={handleSortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {reorderedGoods.map((good) => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export default [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}